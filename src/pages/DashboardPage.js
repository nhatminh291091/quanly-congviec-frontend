
import React, { useEffect, useState } from "react";
import axios from "axios";

function DashboardPage() {
  const [data, setData] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [filters, setFilters] = useState({
    linhVuc: "T·∫•t c·∫£",
    chuTri: "T·∫•t c·∫£",
    hoanThanh: "T·∫•t c·∫£",
    danhGia: "T·∫•t c·∫£",
  });

  useEffect(() => {
    axios.get("https://quanly-congviec-backend.onrender.com/api/quanly").then((response) => {
      const resData = response.data;
      setData(resData);
      setFilteredData(resData);
    });
  }, []);

  useEffect(() => {
    let result = [...data];
    if (filters.linhVuc !== "T·∫•t c·∫£") {
      result = result.filter((task) => task["Lƒ©nh v·ª±c"] === filters.linhVuc);
    }
    if (filters.chuTri !== "T·∫•t c·∫£") {
      result = result.filter((task) => task["Ng∆∞·ªùi ch·ªß tr√¨"] === filters.chuTri);
    }
    if (filters.hoanThanh !== "T·∫•t c·∫£") {
      result = result.filter((task) => task["Th·ªùi gian ho√†n th√†nh"] === filters.hoanThanh);
    }
    if (filters.danhGia !== "T·∫•t c·∫£") {
      result = result.filter((task) => task["ƒê√°nh gi√° k·∫øt qu·∫£"] === filters.danhGia);
    }
    setFilteredData(result);
  }, [filters, data]);

  const uniqueValues = (key) =>
    Array.from(new Set(data.map((item) => item[key]).filter(Boolean)));

  const isCurrentMonth = (dateString) => {
    const dateParts = dateString.split("/");
    if (dateParts.length !== 3) return false;
    const month = parseInt(dateParts[1], 10);
    const year = parseInt(dateParts[2], 10);
    const now = new Date();
    return now.getMonth() + 1 === month && now.getFullYear() === year;
  };

  const isPastMonth = (dateString) => {
    const dateParts = dateString.split("/");
    if (dateParts.length !== 3) return false;
    const month = parseInt(dateParts[1], 10);
    const year = parseInt(dateParts[2], 10);
    const now = new Date();
    return year < now.getFullYear() || (year === now.getFullYear() && month < now.getMonth() + 1);
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">üìã Danh s√°ch c√¥ng vi·ªác ƒë∆∞·ª£c giao</h1>
      <p className="italic text-sm mb-2">
        T·ªïng s·ªë c√¥ng vi·ªác: {filteredData.length}
      </p>
      <div className="overflow-x-auto rounded-md shadow border">
        <table className="table-fixed w-full text-sm text-left text-gray-700">
          <thead className="bg-blue-100 text-gray-700 text-sm">
            <tr>
              <th className="w-[40px] px-2 py-2">#</th>
              <th className="w-[300px] px-2 py-2">T√äN C√îNG VI·ªÜC</th>
              <th className="w-[160px] px-2 py-2">
                Lƒ®NH V·ª∞C
                <select
                  className="block w-full mt-1"
                  onChange={(e) =>
                    setFilters({ ...filters, linhVuc: e.target.value })
                  }
                >
                  <option>T·∫•t c·∫£</option>
                  {uniqueValues("Lƒ©nh v·ª±c").map((value, idx) => (
                    <option key={idx}>{value}</option>
                  ))}
                </select>
              </th>
              <th className="w-[130px] px-2 py-2">TI·∫æN ƒê·ªò</th>
              <th className="w-[160px] px-2 py-2 whitespace-nowrap">
                CH·ª¶ TR√å
                <select
                  className="block w-full mt-1"
                  onChange={(e) =>
                    setFilters({ ...filters, chuTri: e.target.value })
                  }
                >
                  <option>T·∫•t c·∫£</option>
                  {uniqueValues("Ng∆∞·ªùi ch·ªß tr√¨").map((value, idx) => (
                    <option key={idx}>{value}</option>
                  ))}
                </select>
              </th>
              <th className="w-[130px] px-2 py-2">HO√ÄN TH√ÄNH</th>
              <th className="w-[130px] px-2 py-2">
                ƒê√ÅNH GI√Å
                <select
                  className="block w-full mt-1"
                  onChange={(e) =>
                    setFilters({ ...filters, danhGia: e.target.value })
                  }
                >
                  <option>T·∫•t c·∫£</option>
                  {uniqueValues("ƒê√°nh gi√° k·∫øt qu·∫£").map((value, idx) => (
                    <option key={idx}>{value}</option>
                  ))}
                </select>
              </th>
            </tr>
          </thead>
          <tbody>
            {filteredData.length === 0 ? (
              <tr>
                <td colSpan={7} className="text-center italic py-4">
                  Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc.
                </td>
              </tr>
            ) : (
              filteredData.map((task, index) => (
                <tr key={index} className="border-t">
                  <td className="px-2 py-2">{index + 1}</td>
                  <td className="px-2 py-2">{task["T√™n c√¥ng vi·ªác"]}</td>
                  <td className="px-2 py-2">{task["Lƒ©nh v·ª±c"]}</td>
                  <td className="px-2 py-2">
                    <span
                      className={`inline-block rounded-full px-3 py-1 text-xs font-medium ${
                        isCurrentMonth(task["Ti·∫øn ƒë·ªô"])
                          ? "bg-yellow-100 text-yellow-800"
                          : isPastMonth(task["Ti·∫øn ƒë·ªô"])
                          ? "bg-gray-100 text-gray-700 border border-gray-400"
                          : ""
                      }`}
                    >
                      {task["Ti·∫øn ƒë·ªô"]}
                    </span>
                  </td>
                  <td className="px-2 py-2 whitespace-nowrap">{task["Ng∆∞·ªùi ch·ªß tr√¨"]}</td>
                  <td className="px-2 py-2">{task["Th·ªùi gian ho√†n th√†nh"]}</td>
                  <td className="px-2 py-2">
                    <span
                      className={`inline-block rounded-full px-3 py-1 text-xs font-medium ${
                        task["ƒê√°nh gi√° k·∫øt qu·∫£"] === "Ho√†n th√†nh"
                          ? "bg-green-200 text-green-800"
                          : task["ƒê√°nh gi√° k·∫øt qu·∫£"] === "Theo ti·∫øn ƒë·ªô"
                          ? "bg-yellow-200 text-yellow-800"
                          : task["ƒê√°nh gi√° k·∫øt qu·∫£"] === "Ch·∫≠m ti·∫øn ƒë·ªô"
                          ? "bg-orange-200 text-orange-800"
                          : task["ƒê√°nh gi√° k·∫øt qu·∫£"] === "Kh√¥ng ho√†n th√†nh"
                          ? "bg-red-200 text-red-800"
                          : "bg-gray-100 text-gray-500"
                      }`}
                    >
                      {task["ƒê√°nh gi√° k·∫øt qu·∫£"]}
                    </span>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default DashboardPage;
